// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rkinwork/musthave-metrics/internal/storage (interfaces: IMetricRepository)
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/mock_repository.go -package=mocks github.com/rkinwork/musthave-metrics/internal/storage IMetricRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	storage "github.com/rkinwork/musthave-metrics/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIMetricRepository is a mock of IMetricRepository interface.
type MockIMetricRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIMetricRepositoryMockRecorder
}

// MockIMetricRepositoryMockRecorder is the mock recorder for MockIMetricRepository.
type MockIMetricRepositoryMockRecorder struct {
	mock *MockIMetricRepository
}

// NewMockIMetricRepository creates a new mock instance.
func NewMockIMetricRepository(ctrl *gomock.Controller) *MockIMetricRepository {
	mock := &MockIMetricRepository{ctrl: ctrl}
	mock.recorder = &MockIMetricRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMetricRepository) EXPECT() *MockIMetricRepositoryMockRecorder {
	return m.recorder
}

// Collect mocks base method.
func (m *MockIMetricRepository) Collect(arg0 *storage.Metrics) (*storage.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collect", arg0)
	ret0, _ := ret[0].(*storage.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Collect indicates an expected call of Collect.
func (mr *MockIMetricRepositoryMockRecorder) Collect(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collect", reflect.TypeOf((*MockIMetricRepository)(nil).Collect), arg0)
}

// Delete mocks base method.
func (m *MockIMetricRepository) Delete(arg0 *storage.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIMetricRepositoryMockRecorder) Delete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIMetricRepository)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *MockIMetricRepository) Get(arg0 *storage.Metrics) (storage.Metrics, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(storage.Metrics)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIMetricRepositoryMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIMetricRepository)(nil).Get), arg0)
}

// GetAllMetrics mocks base method.
func (m *MockIMetricRepository) GetAllMetrics() []storage.Metrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMetrics")
	ret0, _ := ret[0].([]storage.Metrics)
	return ret0
}

// GetAllMetrics indicates an expected call of GetAllMetrics.
func (mr *MockIMetricRepositoryMockRecorder) GetAllMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMetrics", reflect.TypeOf((*MockIMetricRepository)(nil).GetAllMetrics))
}

// Ping mocks base method.
func (m *MockIMetricRepository) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockIMetricRepositoryMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockIMetricRepository)(nil).Ping))
}

// Set mocks base method.
func (m *MockIMetricRepository) Set(arg0 *storage.Metrics) (*storage.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0)
	ret0, _ := ret[0].(*storage.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockIMetricRepositoryMockRecorder) Set(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockIMetricRepository)(nil).Set), arg0)
}
